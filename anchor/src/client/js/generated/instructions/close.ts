/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { SOLANADAPP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_DISCRIMINATOR = new Uint8Array([
  98, 165, 201, 177, 108, 65, 206, 96,
]);

export function getCloseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_DISCRIMINATOR);
}

export type CloseInstruction<
  TProgram extends string = typeof SOLANADAPP_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSolanadapp extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSolanadapp extends string
        ? WritableAccount<TAccountSolanadapp>
        : TAccountSolanadapp,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseInstructionDataArgs = {};

export function getCloseInstructionDataEncoder(): Encoder<CloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_DISCRIMINATOR })
  );
}

export function getCloseInstructionDataDecoder(): Decoder<CloseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseInstructionDataCodec(): Codec<
  CloseInstructionDataArgs,
  CloseInstructionData
> {
  return combineCodec(
    getCloseInstructionDataEncoder(),
    getCloseInstructionDataDecoder()
  );
}

export type CloseInput<
  TAccountPayer extends string = string,
  TAccountSolanadapp extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  solanadapp: Address<TAccountSolanadapp>;
};

export function getCloseInstruction<
  TAccountPayer extends string,
  TAccountSolanadapp extends string,
  TProgramAddress extends Address = typeof SOLANADAPP_PROGRAM_ADDRESS,
>(
  input: CloseInput<TAccountPayer, TAccountSolanadapp>,
  config?: { programAddress?: TProgramAddress }
): CloseInstruction<TProgramAddress, TAccountPayer, TAccountSolanadapp> {
  // Program address.
  const programAddress = config?.programAddress ?? SOLANADAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    solanadapp: { value: input.solanadapp ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.solanadapp),
    ],
    programAddress,
    data: getCloseInstructionDataEncoder().encode({}),
  } as CloseInstruction<TProgramAddress, TAccountPayer, TAccountSolanadapp>;

  return instruction;
}

export type ParsedCloseInstruction<
  TProgram extends string = typeof SOLANADAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    solanadapp: TAccountMetas[1];
  };
  data: CloseInstructionData;
};

export function parseCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      solanadapp: getNextAccount(),
    },
    data: getCloseInstructionDataDecoder().decode(instruction.data),
  };
}
